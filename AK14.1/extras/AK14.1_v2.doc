Letter = "a" | "b" | "c" | "d" | "e" | "f" | "g"| "h" | "i" | "j" | "k" | "l" | "m" | "n"| "o" | "p" | "q" | "r" | "s" | "t" | "u"| "v" | "w" | "x" | "y" | "z".
LetterBig = |"A" | "B" | "C" | "D" | "E" | "F" | "G"| "H" | "I" | "J" | "K" | "L" | "M" | "N"| "O" | "P" | "Q" | "R" | "S" | "T" | "U"| "V" | "W" | "X" | "Y" | "Z".
Digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" .
Symbol = "["  |  "]"  |  "{"  |  "}"  |  "("  |  ")"  |  "<"  |  ">"  |  "'"  |  "="  |  "|"  |  "."  |  ","  |  ";" | "_" | "\" | "!" | "@" | "#" | "&" | "€" | "£" |"$" | "%"  | "/" | "o"  | "a"  | "^"  | "~" | "`" .
Character = “'”(Letter | LetterBig | Digit | Symbol | SpaceCharacter)“'”.
SpaceCharacter = "\t" | "\s".
WhiteSpace = SpaceCharacter {WhiteSpace}.
String = “\””{Letter | LetterBig | Digit | Symbol| SpaceCharacter}”\””.
Identifier = {"_"} Letter | LetterBig { Letter | LetterBig | Digit }.
ObjectName = LetterBig {Letter} {ObjectName}.
MethodName = {Letter} LetterBig {MethodName}.
Number = [ "-" ] Digit {Digit}.
Boolean = "true" | "false".
Primitives = "int" | "string" | "boolean" | "char".
Modyfier = "public" | "private".
Type = Primitives | ObjectName.
Termination = ";" | "\n".
Program =  File {Program}.
File = {Import}  (Class | Interface | Termination).
Import = "import" ObjectName Termination.
Class = Modyfier  "class" ObjectName  ["generic" "<" Generic ">"] ["extends" ObjectName] ["implements" ObjectName] ClassBody.
Interface = Modyfier "interface" ObjectName InterfaceBody.
InterfaceBody = "open" {MethodHeader} "close".
Generic = Type Identifier {“,” Type Identifier}.
Array = {"[" "]"} {"[" Digit { Digit } "]"}.
ClassBody = "open" {WhiteSpace| Variable | Constructor | Method} "close".
Variable = Modyfier Parameters Termination.
Constructor = Modyfier "constructor" [“<” Generic  ”>”]  "(" Parameters ")" MethodBody.
Method = MethodHeader  MethodBody.
MethodHeader = {Modifyer} (Type Array | "void") MethodName "(" Parameters ")".
Parameters =  [ Type Identifier Array {"," Type Identifier Array}] .
MethodBody =  "open" { WhiteSpace | Statements | Throw} "close".
Statement = {Variable | Assignment | Print | Read | MethodCall | Return | Super | If  | For | While | Try | “break” } Termination.
LocalValue = Identifier { "[" Expression "]" | "." Identifier [ "(" Arguments ")" ] }.
Throw = “throw” LocalValue.
Statements = Statement {Statements}.
CatchStatement = Print | Throw.
CatchStatements = CatchStatement | “open” {CatchStatement} “close”.
Assignment = (  (LocalValue "=" ( Allocation | Ternary  | Expression )) | (LocalValue ("++"  | "--")) | (LocalValue  ( "+=" | "*=" | "-=" | "/=" ) Expression)) Termination.
Print = "print" (Expression | String) Termination.
Read = "read" (LocalValue | String) Termination.
MethodCall = [localValue “.”] MethodName "(" Arguments")" Termination.
Return = "return" [ Expression ] Termination.
Super= "super" "(" Arguments ")" Termination.
If = "if'" "(" Expression ")" (Statements | Throw) [ "else" (Statements | Throw)].
For = "for" "("  (ForSimpleLoop | ForLoopInContainer) ")" Statements.
ForSimpleLooop = [Assignment] ";" [Expression] ";" [Assignment].
ForLoopInContainer = TypeDeclaration "in" LocalValue.
While =   ("while" "(" Expression ")" Statements) | ("do" Statements "while" "(" Expression ")").
Switch = "switch" "(" Identifier ")" { "case" (Letter | Digit) ":" {Statement} [ “break” Termination] } [ "standard" ":"{ Statement} ].
Try = "try" ":" Statements ("catch" "(" TypeDeclaration  ")" CatchStatements) {"catch" "("  TypeDeclaration ")" CatchStatements}.
Argument = Expression | Ternary | Allocation.
Arguments = [ Argument { "," Argument } ].
Allocation = "new" ( ( ObjectName "(" Arguments ")" ) | ( Type  "[" Expression "]"  { "[" Expression "]" } )).
Expression = Operation [( "<" | ">" | "<=" | ">=" | "==" | "!=" ) Operation].
Ternary =  Expression "?" Assignment ":" Assignment Termination.
Operation = Term { ("+" | "-") Term }.
Term = Unary { ('*' | '/' | '%') Unary }.
Unary = [ ('+' | '-') ] Factor.
Factor = Number | String | Boolean | Character | "null" | LocalValue | "(" Expression ")".