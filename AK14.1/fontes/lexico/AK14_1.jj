/*************************************************************************
Arquivo a ser processado pelo programa JavaCC.
Contém:
       - descriçăo do analisador léxico para a linguagem AK14.1

Essa primeira versăo do compilador somente lę a entrada, identifica os tokens
e mostra-os na saída-padrăo.
************************************************************************/


/*@STATIC = true (padrão), classes do parser/lexer terão componentes (variáveis e métodos) static.
  Só um parser/lexer poderá ser criado.
  @STATIC = false tem-se maior flexibilidade com diversas cópias podendo ser criadas.
*/

/* @DEBUG_LOOKAHEAD=true. gera todas as informações de rastreamento e
   um rastro de ações realizadas durante a operação de antecipação.
*/

//1ª PARTE

options {
  STATIC = false;
  DEBUG_LOOKAHEAD = true; // incluido
  UNICODE_INPUT=true; // incluido
}


//2ª PARTE

PARSER_BEGIN(AK14_1)
package lexico;

import java.io.*;


public class AK14_1 {
final static String versao = "AK14.1 Compiler - versao 1.0 - 2014";
boolean flagSaida = false; // saída resumida = falso


// Define o método "main" da classe AK14_1.  
  public  static void main(String args[]) throws ParseException 
  {
    String nomeDoAnalisado = ""; // nome do arquivo a ser analisado
    AK14_1 lexer;     // analisador léxico
    int i;
    boolean parametroCmd = false;

    System.out.println(versao);
    
    // lę os parâmetros passados para o compilador
    for (i = 0; i < args.length - 1; i++)
    {
    if ( args[i].toLowerCase().equals("-short") )
      parametroCmd = true;
    else
        {
           System.out.println("Utilizacao: java AK14.1 [-short] arquivoEntrada");
           System.exit(0);
        }
    }

    if (args[i].equals("-"))
    {       // lę da entrada padrăo      
        System.out.println("Lendo da entrada padrăo . . .");
        lexer = new AK14_1(System.in);
     }
     else 
    {       // lę tokens do arquivo
        nomeDoAnalisado = args[args.length-1];  
        System.out.println("Lendo do arquivo " + nomeDoAnalisado + " . . .");
        try {
            lexer = new AK14_1(new java.io.FileInputStream(nomeDoAnalisado));
        } 
    catch (java.io.FileNotFoundException e) {
               System.out.println("Arquivo " + nomeDoAnalisado + " nao encontrado!!");
        return;
        }
    } 
    lexer.flagSaida = parametroCmd;
    lexer.program();   // chama o método que faz a análise
    if ( lexer.token_source.contadorErrosLexicos() != 0 ) // verifica se houve erro léxico
        System.out.println(lexer.token_source.contadorErrosLexicos() + " Erros LEXICOS encontrados!");
    else
        System.out.println("Codigo analisado com sucesso!");
}  // main

static public String imagem(int x)
{
int k;
String s;
   s = tokenImage[x];
   k = s.lastIndexOf("\"");
   try {s = s.substring(1,k);}
   catch (StringIndexOutOfBoundsException e)
   {}
   return s;
}

}  // AK14_1

PARSER_END(AK14_1)

TOKEN_MGR_DECLS :
{
int contaErrosLexicos = 0;

public int contadorErrosLexicos()
{
   return contaErrosLexicos;
}

}


/* Espaços a serem desprezados no início de cada token: Branco e Comentários */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SKIP :
{
  "(*" : comentario
}

SKIP :
{
  "((" : comentarioLinha
}


/*A deinição ~[] é utilizada para fazer o casamento com qualquer caractere que não esteja
entre os colchetes. Por exemplo, ~[0-9] irá casar com qualquer caractere da entrada
que não seja um dígito e (~["0"-"9"])* irá casar com qualquer cadeia que não possua dígitos.
*/
<comentario> SKIP:
{
   "*)" : DEFAULT
|  <~[]>
}

<comentarioLinha> SKIP:
{
   <["\n","\r"]> : DEFAULT
|   <~[]>
}


/* Palavras reservadas e Literais */

TOKEN :
{
  < BREAK: "break" >
| < CASE: "case" >
| < CATCH: "catch" > // incluido
| < CLASS: "class" >
| < CLOSE: "close" > //incluido
| < CONSTRUCTOR: "constructor" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" > // incluido
| < FOR: "for" >
| < GENERIC: "generic" > // incluido
| < IF: "if" >
| < IMPLEMENTS: "implements" > // incluido
| < IMPORT: "import" > // incluido
| < INTERFACE: "interface" > // incluido
| < IN: "in" > // incluido
| < NEW: "new" >
| < OPEN: "open" > //incluido
| < PRINT: "print" >
| < PRIVATE: "private" > //incluido
| < PUBLIC: "public" > //incluido
| < READ: "read" >
| < RETURN: "return" >
| < STANDARD: "standard" > // incluido
| < SUPER: "super" >
| < SWITCH: "switch" > // incluido
| < THROW: "throw" > // incluido
| < TRUE: "true" > // incluido
| < TRY: "try" > // incluido
| < WHILE: "while" > // incluido
}

/* Primitivos*/

TOKEN:
{
  < BOOLEAN: "boolean" > // incluido
| < CHAR: "char" > // incluido
| < INT: "int" >
| < NULL: "null" > // constante nula - incluido
| < STRING: "string" > // incluido
| < VOID: "void" > // incluido  
}


/* Constantes literais */

TOKEN :
{
  < BOOLEAN_LITERAL: ("true"|"false") > //constante booleana - incluido
|
// números decimais apenas positivos ou negativos - excluido: octais, hexa, binários
/* Excluido | 
                  (["0"-"7"] (["0"-"7"])* ["o", "O"] ) |
                  (["0"-"9"] (["0"-"7","A"-"F","a"-"f"])* ["h", "H"] ) |
                  (["0"-"1"] (["0"-"1"])* ["b", "B"])*/
  < NUMBER_LITERAL:((("-")? ["0"-"9"] (["0"-"9"])* )) >
|
//constante string de todo gênero incluindo símbolos - incluido
  < STRING_LITERAL: "\"" ( <LIST_LETTERS> | <LIST_ASCII> | <LIST_UNICODE> )* "\"" >

|
//constante caractere de todo gênero incluindo símbolos - incluido
  < CHARACTER_LITERAL : "'" ( <LIST_LETTERS> | <LIST_ASCII> | <LIST_UNICODE> ) "'">
| 
  < #LIST_LETTERS:(~[ "'", "\\", "\n", "\r" ]) >
|
  < #LIST_ASCII:("\\"( [ "n", "t", "b", "r", "f", "\\", "'", "\"" ] | [ "0"-"7" ] ([ "0"-"7" ])? | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]))>
|
  < #LIST_UNICODE:("\\u" [ "0"-"9", "A"-"F", "a"-"f" ] [ "0"-"9", "A"-"F", "a"-"f" ] [ "0"-"9", "A"-"F", "a"-"f" ] [ "0"-"9", "A"-"F", "a"-"f" ])>
}

/* Identificadores */

TOKEN :
{
//Identifier = {"_"} Letter { Letter | LetterBig | Digit }.
  < IDENTIFIER: (<UNDERSCORE>)* <LETTER> (<LETTER>|<LETTER_BIG>|<DIGIT>)* >
| 
//ObjectName = LetterBig {Letter} {ObjectName}.
  < OBJECT_NAME: (<LETTER_BIG> (<LETTER>)*)+ >
| 
//MethodName = {Letter} LetterBig {MethodName}.
  < METHOD_NAME: (<LETTER> (<LETTER_BIG>)*)+ >
|
  < #LETTER:["a"-"z"] >
|
  < #LETTER_BIG:["A"-"Z"] >
| 
  < #DIGIT:["0"-"9"] >
|
  < #UNDERSCORE:["_"]>
}

/* Separadores */

TOKEN :
{
  < THEN: "?" > // incluido
| < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < SO: ":" > // incluido
}

/* Operadores */

TOKEN :
{
  < ASSIGN: "=" >
| < DE: "/=" > // incluido
| < DEC: "--" > // incluido
| < EQ: "==" > 
| < GE: ">=" >
| < GT: ">" >
| < INC: "++" > // incluido
| < LT: "<" >
| < LE: "<=" >
| < PE: "+=" > // incluido
| < ME: "-=" > // incluido
| < MINUS: "-" > //  como resolver isso?
| < NEQ: "!=" >
| < PLUS: "+" >
| < REM: "%" >
| < SLASH: "/" >
| < STAR: "*" >
| < XE: "*=" > // incluido
}

/* Trata os erros léxicos */

/*Um erro léxico ocorre quando alguma cadeia que aparece na entrada não pode ser reconhecida como um token válido.
Para identificar esse tipo de erro fizemos o casamento de todas as cadeias formadas por caracteres que não iniciam
nenhuma expressão de casamento para cadeias válidas. */

SPECIAL_TOKEN :
{
<INVALID_LEXICAL: 
(~["a"-"z", "A"-"Z",
  "0"-"9",
  "\"",
  "(",
  ")",
  "[",
  "]",
  "{",
  "}",
  "?",
  ":",
  ";",
  ",",
  ".",
  "=",
  ">",
  "<",
  "!",
  "+",
  "-",
  "_",
  "*",
  "/",
  "%",
  " ",
  "\t",
  "\n",
  "\r",
  "\f",
  "\u0027", // ' 
  "\u007c", // |
  "\u0040", // @
  "\u0023", // #
  "\u00a7", // §
  "\u20ac", // €
  "\u00a3", // £
  "\u0024", // $
  "\u00b0", // º
  "\u00aa", // ª
  "\u005e", // ^
  "\u007e", // ~
  "\u0060"  // `
]

)+>
   {
    System.err.println("Linha " + input_stream.getEndLine() + 
                           " - string invalido encontrado: " + image);
    contaErrosLexicos++;
   }
|
   <INVALID_CONST: 
   "\"" (~ ["\n","\r","\""])* ["\n","\r"]>
   {
    System.err.println("Line " + input_stream.getEndLine() + 
                           " - a constante string tęm \\n: " + image);
    contaErrosLexicos++;
   }

}



JAVACODE void program()
{
Token t;
    do
    {
    t = getNextToken();
    Token proximoToken = t;
        while ( proximoToken.specialToken != null)
        proximoToken = proximoToken.specialToken;
        do {
           if ( flagSaida )
          System.out.println(proximoToken.image + "  " + 
                                 imagem(proximoToken.kind) + " " +
                                 proximoToken.kind);
           else
              System.out.println("Linha: " + proximoToken.beginLine + 
                                 " Coluna: " + proximoToken.beginColumn + 
                                 " " + proximoToken.image +
                                 "  " + imagem(proximoToken.kind) + "  "+t.kind);
          proximoToken = proximoToken.next;       
        } while (proximoToken != t.next);
    } while (t.kind != AK14_1Constants.EOF);  
}


